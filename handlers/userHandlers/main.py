from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from importantFiles.FSM import UserStates
from handlers.keyboard import choice_rc_kb

from aiogram.exceptions import TelegramBadRequest

from utils.keyboard_maker import get_datetime_order_kb
from handlers.keyboard import main_menu_kb

import logging

from datetime import datetime

from importantFiles.config import SEND_ORDER_CHAT_ID, bot

from utils.data_working import check_get_sample, edit_contact_data, change_get_sample, get_contact_data


router = Router()
logger = logging.getLogger(__name__)



@router.callback_query(F.data == "get_sample", UserStates.MAIN_MENU)
async def get_sample(call : CallbackQuery, state : FSMContext):
    if check_get_sample(call.from_user.id):
        return await call.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–±–Ω–∏–∫!")
    send_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ñ–ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:"

    try:
        await call.message.edit_text(text = send_text, reply_markup=choice_rc_kb)
        await state.set_state(UserStates.CHOICE_RESIDENTIAL_COMPLEX)

    except TelegramBadRequest:
        await call.message.answer(text = send_text, reply_markup=choice_rc_kb)
        await state.set_state(UserStates.CHOICE_RESIDENTIAL_COMPLEX)
    
    except Exception as ex:
        logger.error(f"Error in get_sample handler: {str(ex)}")
        await call.answer(text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    
        

@router.callback_query(F.data.in_({"–ù–û–í–´–ô –õ–ï–°–°–ù–ï–†", "FAMILIA", "–ê–†–ò–û–°–¢–û", "–ì–†–ê–ù–î –í–¨–Æ"}), UserStates.CHOICE_RESIDENTIAL_COMPLEX)
async def choice_residential_complex(call : CallbackQuery, state : FSMContext):
    await state.update_data(rc = call.data)

    send_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
    keyboard = get_datetime_order_kb()

    try:
        await call.message.edit_text(text = send_text, reply_markup=keyboard)
        await state.set_state(UserStates.CHOICE_TIME_DELIVERY)

    except TelegramBadRequest:
        await call.message.answer(text = send_text, reply_markup=keyboard)
        await state.set_state(UserStates.CHOICE_TIME_DELIVERY)
    
    except Exception as ex:
        logger.error(f"Error in choice_residential_complex handler: {str(ex)}")
        await call.answer(text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    
        

@router.callback_query(F.data.not_in({"in_menu"}), UserStates.CHOICE_TIME_DELIVERY)
async def choice_time_delivery(call : CallbackQuery, state : FSMContext):

    
    
    
    
    contact_data = get_contact_data(call.from_user.id)
    if not contact_data:
        await state.update_data(sample_datetime = call.data)

        send_text = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏: 
–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.üòä"""

        try:
            await call.message.edit_text(text = send_text)
            await state.set_state(UserStates.INPUT_CONTACT_DATA)

        except TelegramBadRequest:
            await call.message.answer(text = send_text)
            await state.set_state(UserStates.INPUT_CONTACT_DATA)
        
        except Exception as ex:
            logger.error(f"Error in choice_time_delivery handler: {str(ex)}")
            await call.answer(text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        
            

        return
    
    send_text = "–°–ø–∞—Å–∏–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞."

    await call.answer(send_text)
    
    send_text = """–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É–≤–∞–∂–∞–µ–º—ã–µ —Å–æ—Å–µ–¥–∏! üåû 

–ú—ã ‚Äî –º–∞–≥–∞–∑–∏–Ω —Ä—ã–±—ã –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ "–†—ã–±–∞ –≤ —Å–µ—Ç–∏". –†–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ö–ª–∞–∂–¥—ë–Ω–Ω–æ–π –∫—Ä–∞—Å–Ω–æ–π —Ä—ã–±—ã –ø—Ä—è–º–æ –¥–æ –≤–∞—à–∏—Ö –¥–≤–µ—Ä–µ–π! üöö üê† –°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫—É—Å–æ—á–µ–∫ –æ—Ö–ª–∞–∂–¥—ë–Ω–Ω–æ–≥–æ —Ñ–∏–ª–µ –ª–æ—Å–æ—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –ë–ï–°–ü–õ–ê–¢–ù–û!üéâ 

–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –º—ã –ø—Ä–∏–≤–µ–∑—ë–º –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–Ω–∏–∫–∏ –≤–µ—Å–æ–º –æ—Ç 250 –¥–æ 300 –≥—Ä–∞–º–º–æ–≤. –û–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–∏ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∏ —Å–∞–º —Ç–æ–≤–∞—Ä –Ω–µ –Ω—É–∂–Ω–æ! 

–ß—Ç–æ –∑–∞ —Ä—ã–±–∞ –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º?

–≠—Ç–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ —Ñ–∏–ª–µ –º—É—Ä–º–∞–Ω—Å–∫–æ–≥–æ –ª–æ—Å–æ—Å—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–ª–æ—Å—å. –ë—É–∫–≤–∞–ª—å–Ω–æ –≤—á–µ—Ä–∞ —ç—Ç–∞ —Ä—ã–±–∞ –µ—â—ë –ø–ª–∞–≤–∞–ª–∞! –ú—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –≥–¥–µ —Ä—ã–±–∞ —Ä–∞–∑–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è –∏ —Ñ–∞—Å—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. 

–í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏.

–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫" ‚úÖ

–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–∞ —Ä—ã–±–∞ –∏–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–±–Ω–∏–∫ –∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ —Å–≤–µ–∂—É—é —Ä—ã–±—É, –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑". üõí‚ú®"""
    try:
        await call.message.edit_text(text = send_text, reply_markup=main_menu_kb)
        await state.set_state(UserStates.MAIN_MENU)
    

    except TelegramBadRequest:
        await call.message.answer(text = send_text, reply_markup=main_menu_kb)
        await state.set_state(UserStates.MAIN_MENU)
    
    
    except Exception as ex:
        logger.error(f"Error in choice_time_delivery handler: {str(ex)}")
        await call.answer(text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    
        
    data = await state.get_data()

    send_text = f"""
<b>–ü—Ä–æ–±–Ω–∏–∫</b>
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{call.from_user.username}
<b>–ñ–ö:</b> <i>{data["rc"]}</i>
<b>–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:</b> <code>{call.data}</code>

<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
<i>{contact_data}</i>"""
    
    await bot.send_message(chat_id=SEND_ORDER_CHAT_ID, text = send_text)

    
    change_get_sample(user_id=call.from_user.id)
    


@router.message(F.text, UserStates.INPUT_CONTACT_DATA)
async def input_contact_data(message : Message, state : FSMContext):
    contact_data = message.text

    if len(contact_data) > 1024:
        return await message.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    data = await state.get_data()

    send_text = "–°–ø–∞—Å–∏–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞."

    await message.answer(send_text)

    send_text = """–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É–≤–∞–∂–∞–µ–º—ã–µ —Å–æ—Å–µ–¥–∏! üåû 

–ú—ã ‚Äî –º–∞–≥–∞–∑–∏–Ω —Ä—ã–±—ã –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ "–†—ã–±–∞ –≤ —Å–µ—Ç–∏". –†–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ö–ª–∞–∂–¥—ë–Ω–Ω–æ–π –∫—Ä–∞—Å–Ω–æ–π —Ä—ã–±—ã –ø—Ä—è–º–æ –¥–æ –≤–∞—à–∏—Ö –¥–≤–µ—Ä–µ–π! üöö üê† –°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫—É—Å–æ—á–µ–∫ –æ—Ö–ª–∞–∂–¥—ë–Ω–Ω–æ–≥–æ —Ñ–∏–ª–µ –ª–æ—Å–æ—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –ë–ï–°–ü–õ–ê–¢–ù–û!üéâ 

–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –º—ã –ø—Ä–∏–≤–µ–∑—ë–º –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–Ω–∏–∫–∏ –≤–µ—Å–æ–º –æ—Ç 250 –¥–æ 300 –≥—Ä–∞–º–º–æ–≤. –û–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–∏ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∏ —Å–∞–º —Ç–æ–≤–∞—Ä –Ω–µ –Ω—É–∂–Ω–æ! 

–ß—Ç–æ –∑–∞ —Ä—ã–±–∞ –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º?

–≠—Ç–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ —Ñ–∏–ª–µ –º—É—Ä–º–∞–Ω—Å–∫–æ–≥–æ –ª–æ—Å–æ—Å—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–ª–æ—Å—å. –ë—É–∫–≤–∞–ª—å–Ω–æ –≤—á–µ—Ä–∞ —ç—Ç–∞ —Ä—ã–±–∞ –µ—â—ë –ø–ª–∞–≤–∞–ª–∞! –ú—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –≥–¥–µ —Ä—ã–±–∞ —Ä–∞–∑–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è –∏ —Ñ–∞—Å—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. 

–í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏.

–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫" ‚úÖ

–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–∞ —Ä—ã–±–∞ –∏–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–±–Ω–∏–∫ –∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ —Å–≤–µ–∂—É—é —Ä—ã–±—É, –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑". üõí‚ú®"""
    await message.answer(send_text, reply_markup=main_menu_kb)
    await state.set_state(UserStates.MAIN_MENU)


    send_text = f"""
<b>–ü—Ä–æ–±–Ω–∏–∫</b>
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username}
<b>–ñ–ö:</b> <i>{data["rc"]}</i>
<b>–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:</b> <code>{data["sample_datetime"]}</code>

<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
<i>{contact_data}</i>"""
    
    await bot.send_message(chat_id=SEND_ORDER_CHAT_ID, text = send_text)

    edit_contact_data(user_id=message.from_user.id, contact_data=message.text)
    change_get_sample(user_id=message.from_user.id)






@router.callback_query(F.data == "make_order", UserStates.MAIN_MENU)
async def make_order(call : CallbackQuery, state : FSMContext):
    contact_data = get_contact_data(call.from_user.id)
    if not contact_data:
        send_text = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏: 
–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.üòä"""
        try:
            await call.message.edit_text(text = send_text)
            await state.set_state(UserStates.INPUT_CONTACT_DATA_ORDER)

        except TelegramBadRequest:
            await call.message.answer(text = send_text)
            await state.set_state(UserStates.INPUT_CONTACT_DATA_ORDER)
        
        except Exception as ex:
            logger.error(f"Error in make_order handler: {str(ex)}")
            await call.answer(text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        

        return
    
    send_text = "–°–ø–∞—Å–∏–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞."
    await call.answer(send_text)

    send_text = f"""
<b>–ó–∞–∫–∞–∑</b>
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{call.from_user.username}

<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
<i>{contact_data}</i>"""
    
    await bot.send_message(chat_id=SEND_ORDER_CHAT_ID, text = send_text)
    


@router.message(F.text, UserStates.INPUT_CONTACT_DATA_ORDER)
async def input_contact_data_order(message : Message, state : FSMContext):
    contact_data = message.text
    if len(contact_data) > 1024:
        return await message.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    send_text = "–°–ø–∞—Å–∏–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞."
    await message.answer(send_text)
    send_text = """–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É–≤–∞–∂–∞–µ–º—ã–µ —Å–æ—Å–µ–¥–∏! üåû 

–ú—ã ‚Äî –º–∞–≥–∞–∑–∏–Ω —Ä—ã–±—ã –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ "–†—ã–±–∞ –≤ —Å–µ—Ç–∏". –†–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ö–ª–∞–∂–¥—ë–Ω–Ω–æ–π –∫—Ä–∞—Å–Ω–æ–π —Ä—ã–±—ã –ø—Ä—è–º–æ –¥–æ –≤–∞—à–∏—Ö –¥–≤–µ—Ä–µ–π! üöö üê† –°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫—É—Å–æ—á–µ–∫ –æ—Ö–ª–∞–∂–¥—ë–Ω–Ω–æ–≥–æ —Ñ–∏–ª–µ –ª–æ—Å–æ—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –ë–ï–°–ü–õ–ê–¢–ù–û!üéâ 

–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –º—ã –ø—Ä–∏–≤–µ–∑—ë–º –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–Ω–∏–∫–∏ –≤–µ—Å–æ–º –æ—Ç 250 –¥–æ 300 –≥—Ä–∞–º–º–æ–≤. –û–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–∏ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∏ —Å–∞–º —Ç–æ–≤–∞—Ä –Ω–µ –Ω—É–∂–Ω–æ! 

–ß—Ç–æ –∑–∞ —Ä—ã–±–∞ –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º?

–≠—Ç–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ —Ñ–∏–ª–µ –º—É—Ä–º–∞–Ω—Å–∫–æ–≥–æ –ª–æ—Å–æ—Å—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–ª–æ—Å—å. –ë—É–∫–≤–∞–ª—å–Ω–æ –≤—á–µ—Ä–∞ —ç—Ç–∞ —Ä—ã–±–∞ –µ—â—ë –ø–ª–∞–≤–∞–ª–∞! –ú—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –≥–¥–µ —Ä—ã–±–∞ —Ä–∞–∑–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è –∏ —Ñ–∞—Å—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. 

–í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏.

–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫" ‚úÖ

–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–∞ —Ä—ã–±–∞ –∏–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–±–Ω–∏–∫ –∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ —Å–≤–µ–∂—É—é —Ä—ã–±—É, –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑". üõí‚ú®"""
    await message.answer(send_text, reply_markup=main_menu_kb)
    await state.set_state(UserStates.MAIN_MENU)


    edit_contact_data(message.from_user.id, contact_data)

    send_text = f"""
<b>–ó–∞–∫–∞–∑</b>
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username}

<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
<i>{contact_data}</i>"""
    
    await bot.send_message(chat_id=SEND_ORDER_CHAT_ID, text = send_text)







    